// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type History interface {
	IsHistory()
}

type Identifiable interface {
	IsIdentifiable()
	GetID() string
}

type Info interface {
	IsInfo()
	GetQuantity() int
}

type PaymentType interface {
	IsPaymentType()
	GetMedium() PaymentMedium
}

type Store interface {
	IsStore()
	GetLocation() string
}

type Wallet interface {
	IsWallet()
	GetCurrency() string
	GetAmount() float64
}

type Card struct {
	Medium   PaymentMedium `json:"medium"`
	CardType CardType      `json:"cardType"`
}

func (Card) IsPaymentType()                {}
func (this Card) GetMedium() PaymentMedium { return this.Medium }

type Cash struct {
	Medium PaymentMedium `json:"medium"`
}

func (Cash) IsPaymentType()                {}
func (this Cash) GetMedium() PaymentMedium { return this.Medium }

type Cat struct {
	Name string `json:"name"`
}

type GiftCard struct {
	Medium PaymentMedium `json:"medium"`
}

func (GiftCard) IsPaymentType()                {}
func (this GiftCard) GetMedium() PaymentMedium { return this.Medium }

type Product struct {
	Upc string `json:"upc"`
}

func (Product) IsEntity() {}

type Purchase struct {
	Product  *Product `json:"product"`
	Wallet   Wallet   `json:"wallet"`
	Quantity int      `json:"quantity"`
}

func (Purchase) IsHistory() {}

func (Purchase) IsInfo()               {}
func (this Purchase) GetQuantity() int { return this.Quantity }

type Sale struct {
	Product  *Product `json:"product"`
	Rating   int      `json:"rating"`
	Location string   `json:"location"`
}

func (Sale) IsHistory() {}

func (Sale) IsStore()                 {}
func (this Sale) GetLocation() string { return this.Location }

type User struct {
	ID               string      `json:"id"`
	Username         string      `json:"username"`
	History          []History   `json:"history"`
	RealName         string      `json:"realName"`
	PreferredPayment PaymentType `json:"preferredPayment"`
}

func (User) IsIdentifiable()    {}
func (this User) GetID() string { return this.ID }

func (User) IsEntity() {}

type WalletType1 struct {
	Currency      string  `json:"currency"`
	Amount        float64 `json:"amount"`
	SpecialField1 string  `json:"specialField1"`
}

func (WalletType1) IsWallet()                {}
func (this WalletType1) GetCurrency() string { return this.Currency }
func (this WalletType1) GetAmount() float64  { return this.Amount }

type WalletType2 struct {
	Currency      string  `json:"currency"`
	Amount        float64 `json:"amount"`
	SpecialField2 string  `json:"specialField2"`
}

func (WalletType2) IsWallet()                {}
func (this WalletType2) GetCurrency() string { return this.Currency }
func (this WalletType2) GetAmount() float64  { return this.Amount }

type CardType string

const (
	CardTypeVisa       CardType = "VISA"
	CardTypeMastercard CardType = "MASTERCARD"
	CardTypeAmex       CardType = "AMEX"
)

var AllCardType = []CardType{
	CardTypeVisa,
	CardTypeMastercard,
	CardTypeAmex,
}

func (e CardType) IsValid() bool {
	switch e {
	case CardTypeVisa, CardTypeMastercard, CardTypeAmex:
		return true
	}
	return false
}

func (e CardType) String() string {
	return string(e)
}

func (e *CardType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardType", str)
	}
	return nil
}

func (e CardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentMedium string

const (
	PaymentMediumBespoke  PaymentMedium = "BESPOKE"
	PaymentMediumDigital  PaymentMedium = "DIGITAL"
	PaymentMediumMaterial PaymentMedium = "MATERIAL"
)

var AllPaymentMedium = []PaymentMedium{
	PaymentMediumBespoke,
	PaymentMediumDigital,
	PaymentMediumMaterial,
}

func (e PaymentMedium) IsValid() bool {
	switch e {
	case PaymentMediumBespoke, PaymentMediumDigital, PaymentMediumMaterial:
		return true
	}
	return false
}

func (e PaymentMedium) String() string {
	return string(e)
}

func (e *PaymentMedium) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMedium(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMedium", str)
	}
	return nil
}

func (e PaymentMedium) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
